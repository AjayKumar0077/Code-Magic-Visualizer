{"version":3,"file":"static/js/286.ed0d9f75.chunk.js","mappings":"MAcA,IAAIA,EAAU,KACVC,GAAc,EACdC,EAAW,iDACXC,EAAe,KAEnBC,eAAeC,IACTJ,IAC4B,oBAArBK,KAAKC,aAEdC,cAAcN,EAAW,cAE3BF,QAAgBM,KAAKC,YAAY,CAAEL,aACnCD,GAAc,EAChB,CAEAK,KAAKG,UAAYL,UACf,MAAMM,EAAMC,EAAEC,MAAQ,CAAC,EACvB,IACE,GAAiB,SAAbF,EAAIG,KAQN,MAP4B,kBAAjBH,EAAIR,UAAyBQ,EAAIR,WAE1CA,EAAWQ,EAAIR,SAASY,SAAS,KAAOJ,EAAIR,SAAWQ,EAAIR,SAAW,KAExEC,EAAeO,EAAIK,OAAS,WACtBV,SACNC,KAAKU,YAAY,CAAEH,KAAM,QAASE,MAAOZ,IAI3C,GAAiB,QAAbO,EAAIG,KAAgB,CAGtB,GADKZ,SAAmBI,KACnBK,EAAIK,OAASL,EAAIK,QAAUZ,EAAc,OAE9C,MAAMc,EAAQP,EAAIO,OAAS,KAGrBC,EAAUA,CAACC,EAAMC,KACrB,IACEd,KAAKU,YAAY,CAAEH,KAAMM,EAAMJ,MAAOZ,EAAcc,QAAOG,KAAMC,OAAOD,IAC1E,CAAE,MAAOE,GAAI,GAGftB,EAAQuB,QAAQC,IAAI,WAAYN,GAEhCZ,KAAKU,YAAY,CAAEH,KAAM,QAASE,MAAOZ,EAAcc,gBAGjDjB,EAAQyB,eAAe,ySAe7B,IACE,MAAMC,QAAc1B,EAAQyB,eAAeJ,OAAOX,EAAIiB,MAAQ,KAC9DrB,KAAKU,YAAY,CAAEH,KAAM,SAAUE,MAAOZ,EAAcc,QAAOS,MAAgB,MAATA,EAAgB,GAAKL,OAAOK,IACpG,CAAE,MAAOE,GACPtB,KAAKU,YAAY,CAAEH,KAAM,QAASE,MAAOZ,EAAcc,QAAOY,QAASR,OAAQO,GAAOA,EAAIC,SAAYD,IACxG,CACA,MACF,CACF,CAAE,MAAOA,GACPtB,KAAKU,YAAY,CAAEH,KAAM,QAASE,MAAOZ,EAAcc,MAAO,KAAMY,QAASR,OAAQO,GAAOA,EAAIC,SAAYD,IAC9G,E","sources":["python/pyWorker.js"],"sourcesContent":["/* eslint-disable no-restricted-globals, no-undef */\r\n/* global self */\r\n// Pyodide Worker: loads pyodide and executes Python code safely off the main thread.\r\n// Protocol:\r\n// Host -> Worker:\r\n//   { type: 'init', token, indexURL? }\r\n//   { type: 'run', token, runId, code }\r\n// Worker -> Host (always echoes token and runId when available):\r\n//   { type: 'ready', token }\r\n//   { type: 'start', token, runId }\r\n//   { type: 'stdout'|'stderr', token, runId, text }\r\n//   { type: 'result', token, runId, value }\r\n//   { type: 'error', token, runId, message }\r\n\r\nlet pyodide = null;\r\nlet initialized = false;\r\nlet indexURL = 'https://cdn.jsdelivr.net/pyodide/v0.24.1/full/'; // pinned version\r\nlet currentToken = null; // token for the current executor instance\r\n\r\nasync function loadPyodideIfNeeded() {\r\n  if (initialized) return;\r\n  if (typeof self.loadPyodide !== 'function') {\r\n    // Load pyodide loader script from configured base URL\r\n    importScripts(indexURL + 'pyodide.js');\r\n  }\r\n  pyodide = await self.loadPyodide({ indexURL });\r\n  initialized = true;\r\n}\r\n\r\nself.onmessage = async (e) => {\r\n  const msg = e.data || {};\r\n  try {\r\n    if (msg.type === 'init') {\r\n      if (typeof msg.indexURL === 'string' && msg.indexURL) {\r\n        // Ensure trailing slash\r\n        indexURL = msg.indexURL.endsWith('/') ? msg.indexURL : msg.indexURL + '/';\r\n      }\r\n      currentToken = msg.token || null;\r\n      await loadPyodideIfNeeded();\r\n      self.postMessage({ type: 'ready', token: currentToken });\r\n      return;\r\n    }\r\n\r\n    if (msg.type === 'run') {\r\n      // Only accept run messages tied to our current token\r\n      if (!initialized) await loadPyodideIfNeeded();\r\n      if (!msg.token || msg.token !== currentToken) return;\r\n\r\n      const runId = msg.runId || null;\r\n\r\n      // Bridge a JS helper into Python to stream stdout/stderr with token/runId\r\n      const postStd = (kind, text) => {\r\n        try {\r\n          self.postMessage({ type: kind, token: currentToken, runId, text: String(text) });\r\n        } catch (_) {}\r\n      };\r\n      // Expose to Python world\r\n      pyodide.globals.set('post_std', postStd);\r\n\r\n      self.postMessage({ type: 'start', token: currentToken, runId });\r\n\r\n      // Redirect stdout/stderr in Python to our JS bridge\r\n      await pyodide.runPythonAsync(`\r\nimport sys\r\nfrom js import post_std\r\nclass StdoutCatcher:\r\n    def write(self, s):\r\n        if s:\r\n            post_std('stdout', s)\r\nclass StderrCatcher:\r\n    def write(self, s):\r\n        if s:\r\n            post_std('stderr', s)\r\nsys.stdout = StdoutCatcher()\r\nsys.stderr = StderrCatcher()\r\n`);\r\n\r\n      try {\r\n        const value = await pyodide.runPythonAsync(String(msg.code || ''));\r\n        self.postMessage({ type: 'result', token: currentToken, runId, value: value == null ? '' : String(value) });\r\n      } catch (err) {\r\n        self.postMessage({ type: 'error', token: currentToken, runId, message: String((err && err.message) || err) });\r\n      }\r\n      return;\r\n    }\r\n  } catch (err) {\r\n    self.postMessage({ type: 'error', token: currentToken, runId: null, message: String((err && err.message) || err) });\r\n  }\r\n};"],"names":["pyodide","initialized","indexURL","currentToken","async","loadPyodideIfNeeded","self","loadPyodide","importScripts","onmessage","msg","e","data","type","endsWith","token","postMessage","runId","postStd","kind","text","String","_","globals","set","runPythonAsync","value","code","err","message"],"sourceRoot":""}